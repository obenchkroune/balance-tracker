{"version":3,"sources":["context/AppReducer.js","context/GlobalContext.js","components/AddTransaction.js","components/Header.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","transactions","filter","transaction","id","payload","initialState","title","ammount","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","AddTransaction","open","close","useState","setTitle","setAmmount","useContext","Modal","show","onHide","Header","closeButton","Body","Form","onSubmit","e","preventDefault","newTransaction","uuid","parseInt","Group","Label","Control","onChange","target","placeholder","required","Button","block","variant","isOpen","setIsOpen","className","onClick","Balance","total","map","reduce","preAmmount","currAmmount","toFixed","IncomeExpenses","ammounts","income","prev","curr","expenses","style","fontSize","fontWeight","Row","Col","md","Transaction","ListGroup","Item","borderRight","Math","abs","size","TransactionList","key","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05a61526.chunk.js","sourcesContent":["export default (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter(\r\n          (transaction) => transaction.id !== action.payload\r\n        ),\r\n      };\r\n    case \"ADD_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: [...state.transactions, action.payload],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nexport const initialState = {\r\n  transactions: [\r\n    { id: 1, title: \"Flower\", ammount: -20 },\r\n    { id: 2, title: \"Salary\", ammount: 300 },\r\n    { id: 3, title: \"Book\", ammount: -10 },\r\n    { id: 4, title: \"Camera\", ammount: 150 },\r\n  ],\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  // Actions\r\n  const deleteTransaction = (id) => {\r\n    dispatch({\r\n      type: \"DELETE_TRANSACTION\",\r\n      payload: id,\r\n    });\r\n  };\r\n\r\n  const addTransaction = (transaction) => {\r\n    dispatch({\r\n      type: \"ADD_TRANSACTION\",\r\n      payload: transaction,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction,\r\n        addTransaction,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form, Button, Modal } from \"react-bootstrap\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\n\r\nfunction AddTransaction({ open, close }) {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [ammount, setAmmount] = useState(0);\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newTransaction = {\r\n      id: uuid(),\r\n      title,\r\n      ammount: parseInt(ammount),\r\n    };\r\n\r\n    addTransaction(newTransaction);\r\n    setTitle(\"\");\r\n    setAmmount(0);\r\n    close();\r\n  };\r\n\r\n  return (\r\n    <Modal show={open} onHide={close}>\r\n      <Modal.Header closeButton>\r\n        <h3>New Transaction</h3>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Label>title:</Form.Label>\r\n            <Form.Control\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              placeholder=\"Enter Text...\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>ammount:</Form.Label>\r\n            <Form.Control\r\n              onChange={(e) => setAmmount(e.target.value)}\r\n              type=\"number\"\r\n              value={ammount}\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Button type=\"submit\" block variant=\"info\">\r\n            Add transaction\r\n          </Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n}\r\n\r\nexport default AddTransaction;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport AddTransaction from \"./AddTransaction\";\r\n\r\nfunction Header() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const handleModalClose = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <h3>Balance tracker</h3>\r\n      <Button onClick={() => setIsOpen(true)}>Add Transaction</Button>\r\n      <AddTransaction open={isOpen} close={handleModalClose} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\n\r\nfunction Balance() {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const ammounts = transactions.map((transaction) => transaction.ammount);\r\n\r\n  const total = ammounts\r\n    .reduce((preAmmount, currAmmount) => (preAmmount += currAmmount), 0)\r\n    .toFixed(2);\r\n\r\n  return (\r\n    <div className=\"my-3\">\r\n      <strong>YOUR BALANCE</strong>\r\n      <h1 className=\"display-4\">${total}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Balance;\r\n","import React from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\n\r\nfunction IncomeExpenses() {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const ammounts = transactions.map((transaction) => transaction.ammount);\r\n\r\n  const income = ammounts\r\n    .filter((ammount) => ammount > 0)\r\n    .reduce((prev, curr) => (prev += curr), 0)\r\n    .toFixed(2);\r\n  const expenses =\r\n    ammounts\r\n      .filter((ammount) => ammount < 0)\r\n      .reduce((prev, curr) => (prev += curr), 0) * -(1).toFixed(2);\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-white shadow py-4 text-center bold\"\r\n      style={{ fontSize: \"1.3rem\", fontWeight: \"600\" }}\r\n    >\r\n      <Row>\r\n        <Col md={6} className=\"border-right\">\r\n          INCOME\r\n          <p className=\"text-success m-0\">+${income}</p>\r\n        </Col>\r\n        <Col md={6}>\r\n          EXPENCES\r\n          <p className=\"text-danger m-0\">-${expenses}</p>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IncomeExpenses;\r\n","import React, { useContext } from \"react\";\r\nimport { ListGroup, Button } from \"react-bootstrap\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\n\r\nfunction Transaction({ transaction }) {\r\n  const { deleteTransaction } = useContext(GlobalContext);\r\n\r\n  const expenseStyles = {\r\n    borderRight: \"4px solid #dc3545\",\r\n  };\r\n\r\n  const incomeStyles = {\r\n    borderRight: \"4px solid #28a745\",\r\n  };\r\n\r\n  return (\r\n    <ListGroup.Item\r\n      style={transaction.ammount < 0 ? expenseStyles : incomeStyles}\r\n      className=\"d-flex align-items-center justify-content-between mb-2 shadow-sm\"\r\n    >\r\n      <span>{transaction.title}</span>\r\n      <span>\r\n        {transaction.ammount < 0 ? \"-\" : \"+\"}${Math.abs(transaction.ammount)}\r\n        <Button\r\n          onClick={() => deleteTransaction(transaction.id)}\r\n          size=\"sm\"\r\n          variant=\"danger\"\r\n          className=\"ml-2\"\r\n        >\r\n          delete\r\n        </Button>\r\n      </span>\r\n    </ListGroup.Item>\r\n  );\r\n}\r\n\r\nexport default Transaction;\r\n","import React, { useContext } from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport Transaction from \"./Transaction\";\r\n\r\nfunction TransactionList() {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div className=\"my-3\">\r\n      <h3>History</h3>\r\n      <hr />\r\n\r\n      <ListGroup style={{ fontWeight: \"600\" }}>\r\n        {transactions.map((transaction) => (\r\n          <Transaction key={transaction.id} transaction={transaction} />\r\n        ))}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransactionList;\r\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport Header from \"./components/Header\";\nimport Balance from \"./components/Balance\";\nimport IncomeExpenses from \"./components/IncomeExpenses\";\nimport TransactionList from \"./components/TransactionList\";\nimport { GlobalProvider } from \"./context/GlobalContext\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <div className=\"mx-auto col-lg-5 mt-4\">\n        <Container>\n          <Header />\n          <Balance />\n          <IncomeExpenses />\n          <TransactionList />\n        </Container>\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}